initSidebarItems({"enum":[["Error","Radiant errors."],["InputId","Input key and mousebutton ids"],["InputState","The current state of a key or mousebutton."],["RenderTarget","An enum of render target type instances."],["TextureFilter","Texture minify- or magnify filtering function."],["TextureFormat","Internal texture format. Note that the shader will always see a floating point representation. U[n]* will have their minimum value mapped to 0.0 and their maximum to 1.0."],["TextureWrap","Texture wrapping function."],["Uniform","A uniform value."]],"mod":[["blendmodes","A set of predefined blendmodes for use with `Layer::set_blendmode()`."],["math","Mostly optional math structs."],["postprocessors","A set of predefined postprocessors for use with `Renderer::postprocess()`."],["support","Support structures returned by various methods. Usually not required to be created manually."],["utils","Optional utility features. These may eventually be moved into the example code or a separate library."]],"struct":[["BlendMode","A blendmode for use with `Layer::set_blendmode()`. See blendmodes for a list of predefined modes."],["Color","A color value consisting of four floating point values for the color channels red, green, blue and alpha."],["Display","A target to render to, e.g. a window or full screen."],["Font","A font used for writing on a `Layer`."],["Input","Basic keyboard and mouse support."],["Layer","A drawing surface for text and sprites that implements send+sync and is wait-free for drawing operations."],["Monitor","An individual monitor, returned from `Display::monitors()`."],["Point2","A 2-dimensional point."],["Program","A shader program and its uniforms."],["Rect","A rectangle."],["RenderContext","A thread-safe render-context."],["Renderer","A renderer is used to render `Layers` or `Textures` to the `Display`."],["Sprite","A sprite used for drawing on a `Layer`."],["Texture","A texture to draw or draw to."]],"trait":[["AsRenderTarget","A target for rendering."],["AsUniform","A value usable as a uniform."],["Postprocessor","A custom postprocessor."]],"type":[["Result","Radiant result."]]});