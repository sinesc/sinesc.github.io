initSidebarItems({"enum":[["Error","Radiant errors."],["InputId","Input key and mousebutton ids"],["InputState","The current state of a key or mousebutton."],["RenderTarget","An enum of render target type instances."],["TextureFilter","Texture minify- or magnify filtering function."],["TextureWrap","Texture wrapping function."],["Uniform","A uniform value."]],"mod":[["blendmodes","A set of predefined blendmodes for use with `Layer::set_blendmode()`."],["postprocessors","A set of predefined postprocessors for use with `Renderer::postprocess()`."],["scene","Optional scene abstraction."],["utils","Optional utility features. These may eventually be moved into the example code or a separate library."]],"struct":[["Angle","An Angle between -PI and PI."],["BlendMode","A blendmode for use with `Layer::set_blendmode()`. See blendmodes for a list of predefined modes."],["Color","A color value consisting of four floating point values for the color channels red, green, blue and alpha."],["Display","A target to render to, e.g. a window or full screen."],["DisplayInfo","A struct describing a `Display` to be created."],["Font","A font used for writing on a `Layer`."],["FontInfo","A struct used to filter the result of `Font::query_specific()` or to describe a `Font` to be created from a system font via `Font::from_info()`."],["Input","Basic keyboard and mouse support."],["InputDownIterator","An iterator over all keys all buttons currently pressed."],["InputIterator","An iterator over all keys and buttons."],["InputUpIterator","An iterator over all keys all buttons currently not pressed."],["Layer","A non-blocking, thread-safe drawing target."],["Mat4","A 4x4 matrix."],["Monitor","An individual monitor, returned from `Display::monitors()`."],["Program","A shader program and its uniforms."],["Rect","A rectangle."],["RenderContext","A thread-safe render-context."],["Renderer","A renderer is used to render `Layer`s or `Scene`s to the `Display`."],["Sprite","A sprite used for drawing on a `Layer`."],["Texture","A texture."],["Vec2","A 2-dimensional vector."],["Vec3","A 3-dimensional vector."]],"trait":[["AsUniform","A value usable as a uniform."],["Postprocessor","A custom postprocessor."],["VecType","Trait for values that can be converted to a vector."]],"type":[["Point2","A 2-dimensional point."],["Point3","A 3-dimensional point."],["Result","Radiant result."]]});